// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -destination=scheduler_mock_test.go -source=scheduler.go -package=batcher github.com/yckao/go-batcher SchedulerCallback,Scheduler
//
// Package batcher is a generated GoMock package.
package batcher

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// Schedule mocks base method.
func (m *MockScheduler) Schedule(ctx context.Context, batch Batch, callback SchedulerCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Schedule", ctx, batch, callback)
}

// Schedule indicates an expected call of Schedule.
func (mr *MockSchedulerMockRecorder) Schedule(ctx, batch, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockScheduler)(nil).Schedule), ctx, batch, callback)
}

// MockSchedulerCallback is a mock of SchedulerCallback interface.
type MockSchedulerCallback struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerCallbackMockRecorder
}

// MockSchedulerCallbackMockRecorder is the mock recorder for MockSchedulerCallback.
type MockSchedulerCallbackMockRecorder struct {
	mock *MockSchedulerCallback
}

// NewMockSchedulerCallback creates a new mock instance.
func NewMockSchedulerCallback(ctrl *gomock.Controller) *MockSchedulerCallback {
	mock := &MockSchedulerCallback{ctrl: ctrl}
	mock.recorder = &MockSchedulerCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerCallback) EXPECT() *MockSchedulerCallbackMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockSchedulerCallback) Call() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Call")
}

// Call indicates an expected call of Call.
func (mr *MockSchedulerCallbackMockRecorder) Call() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockSchedulerCallback)(nil).Call))
}
