// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yckao/go-batcher (interfaces: Callback,Batch)
//
// Generated by this command:
//
//	mockgen -destination=batcher_mock.go -package=mock github.com/yckao/go-batcher Callback,Batch
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockCallback) Call() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Call")
}

// Call indicates an expected call of Call.
func (mr *MockCallbackMockRecorder) Call() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockCallback)(nil).Call))
}

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockBatch) Dispatch() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockBatchMockRecorder) Dispatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockBatch)(nil).Dispatch))
}

// Full mocks base method.
func (m *MockBatch) Full() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Full")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Full indicates an expected call of Full.
func (mr *MockBatchMockRecorder) Full() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Full", reflect.TypeOf((*MockBatch)(nil).Full))
}
