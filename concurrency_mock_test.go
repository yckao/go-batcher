// Code generated by MockGen. DO NOT EDIT.
// Source: concurrency.go
//
// Generated by this command:
//
//	mockgen -destination=concurrency_mock_test.go -source=concurrency.go -package=batcher github.com/yckao/go-batcher ConcurrencyControl
//
// Package batcher is a generated GoMock package.
package batcher

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConcurrencyControl is a mock of ConcurrencyControl interface.
type MockConcurrencyControl struct {
	ctrl     *gomock.Controller
	recorder *MockConcurrencyControlMockRecorder
}

// MockConcurrencyControlMockRecorder is the mock recorder for MockConcurrencyControl.
type MockConcurrencyControlMockRecorder struct {
	mock *MockConcurrencyControl
}

// NewMockConcurrencyControl creates a new mock instance.
func NewMockConcurrencyControl(ctrl *gomock.Controller) *MockConcurrencyControl {
	mock := &MockConcurrencyControl{ctrl: ctrl}
	mock.recorder = &MockConcurrencyControlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcurrencyControl) EXPECT() *MockConcurrencyControlMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockConcurrencyControl) Acquire(ctx context.Context) (ConcurrencyToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx)
	ret0, _ := ret[0].(ConcurrencyToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockConcurrencyControlMockRecorder) Acquire(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockConcurrencyControl)(nil).Acquire), ctx)
}

// MockConcurrencyToken is a mock of ConcurrencyToken interface.
type MockConcurrencyToken struct {
	ctrl     *gomock.Controller
	recorder *MockConcurrencyTokenMockRecorder
}

// MockConcurrencyTokenMockRecorder is the mock recorder for MockConcurrencyToken.
type MockConcurrencyTokenMockRecorder struct {
	mock *MockConcurrencyToken
}

// NewMockConcurrencyToken creates a new mock instance.
func NewMockConcurrencyToken(ctrl *gomock.Controller) *MockConcurrencyToken {
	mock := &MockConcurrencyToken{ctrl: ctrl}
	mock.recorder = &MockConcurrencyTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcurrencyToken) EXPECT() *MockConcurrencyTokenMockRecorder {
	return m.recorder
}

// Release mocks base method.
func (m *MockConcurrencyToken) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockConcurrencyTokenMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockConcurrencyToken)(nil).Release))
}
